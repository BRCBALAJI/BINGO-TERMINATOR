<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multiplayer Game</title>
  <!-- Tailwind CSS for styling -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Inter font from Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
    }
  </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-50 flex items-center justify-center min-h-screen">
  <div id="root" class="w-full"></div>

  <!-- React and ReactDOM scripts -->
  <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
  <script crossorigin src="https://unpkg.com/react-dom@18/umd/react.production.min.js"></script>
  <!-- Babel for JSX transformation -->
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

  <!-- The main React application code, now with integrated Firebase setup -->
  <script type="text/babel">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, getDoc, setDoc, onSnapshot, collection, query, addDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    const { useState, useEffect } = React;

    // A simple custom message box component instead of alert()
    const MessageBox = ({ message, onClose }) => {
      if (!message) return null;
      return (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl text-center max-w-sm w-full">
            <p className="text-gray-900 dark:text-gray-50 text-lg mb-4">{message}</p>
            <button
              onClick={onClose}
              className="bg-blue-600 text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:bg-blue-700 transition duration-300"
            >
              OK
            </button>
          </div>
        </div>
      );
    };

    const App = () => {
      const [gameId, setGameId] = useState('');
      const [inputGameId, setInputGameId] = useState('');
      const [gameData, setGameData] = useState(null);
      const [userId, setUserId] = useState(null);
      const [loading, setLoading] = useState(true);
      const [error, setError] = useState('');

      const [db, setDb] = useState(null);
      const [auth, setAuth] = useState(null);
      const [appId, setAppId] = useState('default-app-id');

      // Initialize Firebase and handle authentication
      useEffect(() => {
        const initFirebase = async () => {
          try {
            const currentAppId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
            const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { /* Your Firebase config here if running locally */ };
            const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
            
            setAppId(currentAppId);

            const app = initializeApp(firebaseConfig);
            const authInstance = getAuth(app);
            const dbInstance = getFirestore(app);

            setAuth(authInstance);
            setDb(dbInstance);

            onAuthStateChanged(authInstance, (user) => {
              if (user) {
                setUserId(user.uid);
              } else {
                setUserId(null);
              }
              setLoading(false);
            });

            if (initialAuthToken) {
              await signInWithCustomToken(authInstance, initialAuthToken);
            } else {
              await signInAnonymously(authInstance);
            }
          } catch (err) {
            console.error("Firebase initialization error:", err);
            setError('Failed to initialize the app.');
            setLoading(false);
          }
        };

        initFirebase();
      }, []);

      const gameDocRef = gameId && db ? doc(db, `/artifacts/${appId}/public/data/games`, gameId) : null;

      // Real-time listener for game data
      useEffect(() => {
        if (!gameDocRef) return;

        const unsubscribe = onSnapshot(gameDocRef, (docSnap) => {
          if (docSnap.exists()) {
            setGameData(docSnap.data());
          } else {
            setGameData(null);
            setError('Game not found.');
          }
        }, (err) => {
          console.error("Error fetching game data:", err);
          setError('Failed to load game data.');
        });

        return () => unsubscribe();
      }, [gameDocRef]);

      const handleCreateGame = async () => {
        if (!userId || !db) {
          setError('Please wait for authentication to complete.');
          return;
        }

        try {
          const newGameId = crypto.randomUUID().substring(0, 8).toUpperCase();
          const initialBoard = Array(9).fill(null);
          const initialPlayers = { [userId]: { uid: userId, symbol: 'X' } };
          const newGameDoc = {
            gameId: newGameId,
            players: initialPlayers,
            board: JSON.stringify(initialBoard),
            turn: userId,
            status: 'waiting',
            winner: null
          };
          await setDoc(doc(db, `/artifacts/${appId}/public/data/games`, newGameId), newGameDoc);
          setGameId(newGameId);
          console.log(`Game created with ID: ${newGameId}`);
        } catch (e) {
          console.error("Error creating new game:", e);
          setError('Failed to create a new game.');
        }
      };

      const handleJoinGame = async () => {
        if (!userId || !db) {
          setError('Please wait for authentication to complete.');
          return;
        }

        if (!inputGameId) {
          setError('Please enter a Game ID.');
          return;
        }

        const gameRef = doc(db, `/artifacts/${appId}/public/data/games`, inputGameId);
        try {
          const docSnap = await getDoc(gameRef);
          if (docSnap.exists()) {
            const currentData = docSnap.data();
            if (Object.keys(currentData.players).length < 2) {
              const symbol = Object.keys(currentData.players).length === 0 ? 'X' : 'O';
              const updatedPlayers = {
                ...currentData.players,
                [userId]: { uid: userId, symbol }
              };
              await updateDoc(gameRef, {
                players: updatedPlayers,
                status: 'playing'
              });
              setGameId(inputGameId);
              console.log(`Joined game with ID: ${inputGameId}`);
            } else {
              setError('Game is full.');
            }
          } else {
            setError('Game not found.');
          }
        } catch (e) {
          console.error("Error joining game:", e);
          setError('Failed to join the game.');
        }
      };

      const handleCellClick = async (index) => {
        if (!gameData || gameData.status !== 'playing' || gameData.turn !== userId || gameData.winner) {
          return;
        }

        try {
          let board = JSON.parse(gameData.board);
          if (board[index]) {
            return;
          }

          const mySymbol = gameData.players[userId]?.symbol;
          board[index] = mySymbol;

          const winner = checkWinner(board);
          let newTurn = null;
          let newStatus = 'playing';

          if (winner) {
            newStatus = 'finished';
          } else if (board.every(cell => cell !== null)) {
            newStatus = 'draw';
          } else {
            const otherPlayerId = Object.keys(gameData.players).find(id => id !== userId);
            newTurn = otherPlayerId;
          }

          await updateDoc(gameDocRef, {
            board: JSON.stringify(board),
            turn: newTurn,
            status: newStatus,
            winner: winner
          });
        } catch (e) {
          console.error("Error making move:", e);
          setError('Failed to make a move.');
        }
      };

      const checkWinner = (board) => {
        const lines = [
          [0, 1, 2], [3, 4, 5], [6, 7, 8],
          [0, 3, 6], [1, 4, 7], [2, 5, 8],
          [0, 4, 8], [2, 4, 6],
        ];
        for (let i = 0; i < lines.length; i++) {
          const [a, b, c] = lines[i];
          if (board[a] && board[a] === board[b] && board[a] === board[c]) {
            return board[a];
          }
        }
        return null;
      };

      const getStatusMessage = () => {
        if (!gameData) return "Loading...";
        if (gameData.status === 'waiting') return "Waiting for a second player...";
        if (gameData.status === 'finished') return `Player ${gameData.winner} wins!`;
        if (gameData.status === 'draw') return "It's a draw!";
        if (gameData.turn === userId) return "It's your turn!";
        return "Waiting for opponent's move...";
      };

      // UI Components
      const Lobby = () => (
        <div className="flex flex-col items-center p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
          <h1 className="text-3xl font-bold mb-6 text-blue-600 dark:text-blue-400">Multiplayer Tic-Tac-Toe</h1>
          <p className="text-sm text-gray-500 dark:text-gray-400 mb-4 text-center">Your User ID: <span className="font-mono bg-gray-100 dark:bg-gray-700 p-1 rounded">{userId}</span></p>
          <div className="w-full space-y-4">
            <button
              onClick={handleCreateGame}
              className="w-full bg-green-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-green-700 transition duration-300 transform hover:scale-105"
            >
              Create New Game
            </button>
            <div className="relative flex items-center">
              <input
                type="text"
                placeholder="Enter Game ID"
                value={inputGameId}
                onChange={(e) => setInputGameId(e.target.value)}
                className="w-full p-3 pr-12 rounded-lg border-2 border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-300"
              />
              <button
                onClick={handleJoinGame}
                className="absolute right-0 top-0 h-full bg-blue-600 text-white font-semibold py-3 px-6 rounded-r-lg shadow-md hover:bg-blue-700 transition duration-300"
              >
                Join
              </button>
            </div>
            {gameId && (
              <p className="mt-4 text-center text-lg font-medium text-gray-700 dark:text-gray-300">
                Game ID: <span className="font-bold text-blue-600 dark:text-blue-400">{gameId}</span>
              </p>
            )}
          </div>
        </div>
      );

      const GameBoard = () => {
        if (!gameData) return null;
        const board = JSON.parse(gameData.board);

        return (
          <div className="flex flex-col items-center p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
            <h1 className="text-3xl font-bold mb-4 text-blue-600 dark:text-blue-400">Tic-Tac-Toe</h1>
            <p className="mb-6 text-xl font-medium text-center">{getStatusMessage()}</p>
            {gameId && (
              <p className="text-sm text-gray-500 dark:text-gray-400 mb-4 text-center">Game ID: <span className="font-mono bg-gray-100 dark:bg-gray-700 p-1 rounded">{gameId}</span></p>
            )}
            <div className="grid grid-cols-3 gap-2 w-72 h-72">
              {board.map((symbol, index) => (
                <button
                  key={index}
                  onClick={() => handleCellClick(index)}
                  className={`flex items-center justify-center text-4xl font-bold rounded-lg transition duration-300
                    ${symbol === 'X' ? 'text-red-500' : 'text-green-500'}
                    ${symbol ? 'bg-gray-200 dark:bg-gray-700 cursor-not-allowed' : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500 cursor-pointer'}
                  `}
                  disabled={!!symbol || gameData.turn !== userId || gameData.status !== 'playing'}
                >
                  {symbol}
                </button>
              ))}
            </div>
            {(gameData.status === 'finished' || gameData.status === 'draw') && (
              <button
                onClick={() => { setGameId(''); setGameData(null); }}
                className="mt-6 w-full bg-purple-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-purple-700 transition duration-300"
              >
                Back to Lobby
              </button>
            )}
          </div>
        );
      };

      if (loading) {
        return (
          <div className="flex items-center justify-center p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl">
            <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            <span className="ml-4 text-lg">Loading...</span>
          </div>
        );
      }

      return (
        <>
          <MessageBox message={error} onClose={() => setError('')} />
          <div className="p-4 md:p-8 w-full flex flex-col items-center">
            {gameId ? <GameBoard /> : <Lobby />}
          </div>
        </>
      );
    };

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<App />);
  </script>
</body>
</html>
